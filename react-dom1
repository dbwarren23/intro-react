const render = () => {
  document.getElementById('mountNode').innerHTML = `
    <div>
      Hello HTML
      <input />
      <pre>${new Date().toLocaleTimeString()}</pre>
    </div>
  `;

  ReactDOM.render(
    React.createElement(
      'div',
      null,
      'Hello React',
      React.createElement('input', null),
      React.createElement('pre', null, new Date().toLocaleTimeString())
    ),
    document.getElementById('mountNode2')
  );
};

setInterval(render, 1000);

// jsdrops.com/bx1

function Button (props) {
    // Returns a DOM/React element here. For example:
    return <button type="submit">{props.label}</button>;
  }
  
  // To render a Button element in the browser
  ReactDOM.render(<Button label="Save" />, mountNode);

// jsdrops.com/bx2

function Button (props) {
    return React.createElement(
      "button",
      { type: "submit" },
      props.label
    );
  }
  
  ReactDOM.render(
    React.createElement(Button, { label: "Save"}),
    mountNode
  );

// jsdrops.com/bx3

// Wrong:
function button () {
    return <div>My Fancy Button</div>;
  };
  
  // The following will render an HTML button
  // (and ignore the fancy button function)
  ReactDOM.render(<button />, mountNode);

  // jsdrops.com/bx4

const RandomValue = () => (
    <div>
      { Math.floor(Math.random() * 100) }
    </div>
  );
  
  ReactDOM.render(<RandomValue />, mountNode);

// jsdrops.com/bx5

const ErrorDisplay = ({ message }) => (
    <div style={ { color:'red', backgroundColor:'yellow' } }>
      {message}
    </div>
  );
  
  ReactDOM.render(
    <ErrorDisplay
      message="These aren't the droids you're looking for"
    />,
    mountNode
  );

// jsdrops.com/bx6

class ConditionalStyle extends React.Component {
    render() {
      return (
        <div style={{ color: Math.random() < 0.5 ? 'green': 'red' }}>
          How do you like this?
        </div>
      );
    }
  }
  
  ReactDOM.render(
    <ConditionalStyle />,
    mountNode,
  );

// jsdrops.com/bx7

class Button extends React.Component {
    render() {
      return (
        <button>{this.props.label}</button>
      );
    }
  }
  
// jsdrops.com/bx8

const Button = ({ clickAction }) => {
    return (
      <button onClick={clickAction}>
        +1
      </button>
    );
  };
  
  const Display = ({ content }) => (
    <pre>{content}</pre>
  );
  
  const CountManager = () => {
    const [count, setCount] = useState(0);
  
    const incrementCounter = () => {
      setCount(count + 1);
    };
  
    return (
      <div>
        <Button clickAction={incrementCounter} />
        <Display content={count} />
      </div>
    );
  };


  const Button = ({ clickValue, clickAction }) => {
    return (
      <button onClick={() => clickAction(clickValue)}>
        +{clickValue}
      </button>
    );
  };
  
  const Display = ({ content }) => (
    <pre>{content}</pre>
  );
  
  const CountManager = () => {
    const [count, setCount] = useState(0);
  
    const incrementCounter = (increment) =>
      setCount(count + increment);
  
    return (
      <div>
        <Button clickAction={incrementCounter} clickValue={1} />
        <Button clickAction={incrementCounter} clickValue={5} />
        <Button clickAction={incrementCounter} clickValue={10} />
        <Display content={count} />
      </div>
    );
  }
  
  ReactDOM.render(<CountManager />, mountNode);

  // jsdrops.com/bx10

const CharacterCounter = () => {
    return (
      <div>
        <textarea cols={80} rows={10} />
        <div>Count: X</div>
      </div>
    );
  };
  
  ReactDOM.render(<CharacterCounter />, mountNode);
